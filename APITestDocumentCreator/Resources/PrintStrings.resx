<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BasicApplicationStructureCreated" xml:space="preserve">
    <value>[INFO] Creating basic folder strucutre in the following path: {0}</value>
    <comment>Variable is 'baseFolder'</comment>
  </data>
  <data name="BasicApplicationStructureDescription" xml:space="preserve">
    <value>## In this step the application will check if the base folders and files are already created or need creation.
</value>
  </data>
  <data name="BasicApplicationStructureExists" xml:space="preserve">
    <value>[INFO] Basic folder structure already exists! No need for creation. The path is {0}</value>
    <comment>Variable is 'baseFolder'</comment>
  </data>
  <data name="BasicApplicationStructureHighlightCreated" xml:space="preserve">
    <value>[INFO] Highlight file '{0}.txt' has been created inside the folder.</value>
    <comment>Variable is 'fileNamesList[2]'</comment>
  </data>
  <data name="BasicApplicationStructureHighlightExampleCreated" xml:space="preserve">
    <value>[INFO] Highlight file '{0}.txt' has been created inside the folder, with an example inside it.</value>
    <comment>Variable is 'fileNamesList[2]'</comment>
  </data>
  <data name="BasicApplicationStructureHighlightExists" xml:space="preserve">
    <value>[INFO] Highlight file already exist, please put the parameter names on it if you wish to highlight any parameter!</value>
  </data>
  <data name="BasicApplicationStructureInputCreated" xml:space="preserve">
    <value>[INFO] Input file '{0}.txt' has been created inside the folder.</value>
    <comment>Variable is 'fileNamesList[0]'</comment>
  </data>
  <data name="BasicApplicationStructureInputExampleCreated" xml:space="preserve">
    <value>[INFO] Input file '{0}.txt' has been created inside the folder, with an example inside it.</value>
    <comment>Variable is 'fileNamesList[0]'</comment>
  </data>
  <data name="BasicApplicationStructureInputExists" xml:space="preserve">
    <value>[INFO] Input file already exist, please check your data inside it!</value>
  </data>
  <data name="BasicApplicationStructureSectionCreated" xml:space="preserve">
    <value>[INFO] Section file '{0}.txt' has been created inside the folder.</value>
    <comment>Variable is 'fileNamesList[1]'</comment>
  </data>
  <data name="BasicApplicationStructureSectionExampleCreated" xml:space="preserve">
    <value>[INFO] Section file '{0}.txt' has been created inside the folder, with an example inside it.</value>
    <comment>Variable is 'fileNamesList[1]'</comment>
  </data>
  <data name="BasicApplicationStructureSectionExists" xml:space="preserve">
    <value>[INFO] Section data file already exist, please review if the file is in the correct pattern!</value>
  </data>
  <data name="BasicApplicationStructureTitle" xml:space="preserve">
    <value>     BASIC APPLICATION STRUCTURE
</value>
  </data>
  <data name="DataPatternExplanationDescription" xml:space="preserve">
    <value>## This is an important step of the application, where is explained how the 4 types of input files patterns are, pay attention to the details bellow and don't forget that each field in the text files are separated with a semi-colon (;).</value>
  </data>
  <data name="DataPatternExplanationHighlightParametersDescription" xml:space="preserve">
    <value>## Here the objective is to read the parameters that you want to be highlighted in yellow, this part is completely optional, but if you want to highlight anything in the JSON, some fields are required.
</value>
  </data>
  <data name="DataPatternExplanationHighlightParametersDescriptionParameterName" xml:space="preserve">
    <value>1) PARAMETER NAME*: Name of the parameter inside the JSON (can be in the request or response).</value>
  </data>
  <data name="DataPatternExplanationHighlightParametersDescriptionParameterNameReference" xml:space="preserve">
    <value>3) PARAMETER NAME REFERENCE: If the parameter that will be highlighted is inside an array in the JSON with multiple objects, an example, you can define the name of the parameter that will be used as reference.</value>
  </data>
  <data name="DataPatternExplanationHighlightParametersDescriptionParameterValueReference" xml:space="preserve">
    <value>4) PARAMETER VALUE REFERENCE: If the parameter that will be highlighted is inside an array in the JSON with multiple objects, an example, you can define the value of the parameter that will be used as reference.</value>
  </data>
  <data name="DataPatternExplanationHighlightParametersDescriptionReminder" xml:space="preserve">
    <value>PS: If you wanna highlight a parameter based on another parameter / value reference, all fields need to be filled!</value>
  </data>
  <data name="DataPatternExplanationHighlightParametersDescriptionSectionNumberReference" xml:space="preserve">
    <value>2) SECTION NUMBER REFERENCE: If you want to highlight a parameter only in a specific sector, fill only this reference field.</value>
  </data>
  <data name="DataPatternExplanationInputDataDescription" xml:space="preserve">
    <value>## The main file of the application, this is where all API request / response logs should be stored.
</value>
  </data>
  <data name="DataPatternExplanationInputDataDescriptionMethodName" xml:space="preserve">
    <value>2) METHOD NAME*: Name of the API endpoint that will appear in the document close to it's respective JSON request and response.</value>
  </data>
  <data name="DataPatternExplanationInputDataDescriptionRequest" xml:space="preserve">
    <value>4) REQUEST*: JSON used in the request (don't need pre-formatting).</value>
  </data>
  <data name="DataPatternExplanationInputDataDescriptionResponse" xml:space="preserve">
    <value>5) RESPONSE*: JSON received in the response (don't need pre-formatting).</value>
  </data>
  <data name="DataPatternExplanationInputDataDescriptionSectionNumber" xml:space="preserve">
    <value>1) SECTION NUMBER*: Section number in which all the input will be showed in the document, if the section has more than one input line, apply the same number but write in the order of appeareance.</value>
  </data>
  <data name="DataPatternExplanationInputDataDescriptionURL" xml:space="preserve">
    <value>3) URL*: URL used in the request to the API.</value>
  </data>
  <data name="DataPatternExplanationPicturesDescription" xml:space="preserve">
    <value>## This step is completely optional, but if you want to put some images on each section of the document, a pattern must be followed.
</value>
  </data>
  <data name="DataPatternExplanationPicturesImageName" xml:space="preserve">
    <value>IMAGE NAME: Each image must be declare by indicating its section and order, an example is '2_1.png' where this image is in sector 2 and is the first image to be showed.</value>
  </data>
  <data name="DataPatternExplanationPicturesTitle" xml:space="preserve">
    <value>     PICTURES FOLDER PATTERN
</value>
  </data>
  <data name="DataPatternExplanationSectionInformationDescription" xml:space="preserve">
    <value>## In this file you will fill all informations about the sectors of the document.
</value>
  </data>
  <data name="DataPatternExplanationSectionInformationDescriptionSection" xml:space="preserve">
    <value>3) DESCRIPTION: A text that should briefly explain what happened in the sector.</value>
  </data>
  <data name="DataPatternExplanationSectionInformationDescriptionSectionName" xml:space="preserve">
    <value>2) SECTION NAME*: The name used to define the section.</value>
  </data>
  <data name="DataPatternExplanationSectionInformationDescriptionSectionNumber" xml:space="preserve">
    <value>1) SECTION NUMBER*: Number of the section that will be showed in the document.</value>
  </data>
  <data name="DataPatternExplanationTitle" xml:space="preserve">
    <value>   DATA FILES - PATTERN EXPLANATION
</value>
  </data>
  <data name="DataPatternValidationQuestion" xml:space="preserve">
    <value>
&gt; Before we continue with the validation of all files, review if the data inside the files is following its respective pattern.

Option: </value>
  </data>
  <data name="DataPatternValidationQuestionOptions" xml:space="preserve">
    <value>- Type '1' if it's OK
- Type '2' to exit application

Option: </value>
  </data>
  <data name="DocumentBasicInformationDescription" xml:space="preserve">
    <value>## This step is to input some informations about the properties of the document.
</value>
  </data>
  <data name="DocumentBasicInformationTitle" xml:space="preserve">
    <value>          DOCUMENT PROPERTIES
</value>
  </data>
  <data name="DocumentBasicInformationTitleInput" xml:space="preserve">
    <value>&gt; What is the title of the document? (The title will be the result file name too)
Title: </value>
  </data>
  <data name="DocumentBasicInformationTitleInputEmptyValidation" xml:space="preserve">
    <value>
[INFO] The title can't be empty!
Please insert a new title: </value>
  </data>
  <data name="DocumentBasicInformationTitleInputRegexValidation" xml:space="preserve">
    <value>
[INFO] The title text can only contain the following:
- NUMBERS (0-9)
- ALPHABETICAL CHARACTERS (A-Z)
- UNDERLINE (_)
- HYPHEN (-)

Please insert a new title: </value>
  </data>
  <data name="DocumentCreatedConfirmation" xml:space="preserve">
    <value>[INFO] Document created in the following path: {0}\{1}.docx</value>
    <comment>Variables are 'resultFolder' and 'titleText'</comment>
  </data>
  <data name="DocumentCreationAlert" xml:space="preserve">
    <value>[INFO] Starting creation process.</value>
  </data>
  <data name="DocumentCreationTitle" xml:space="preserve">
    <value>          DOCUMENT CREATION
</value>
  </data>
  <data name="ExitingApplication" xml:space="preserve">
    <value>

[INFO] Exiting application...</value>
  </data>
  <data name="InformationExampleDocumentation" xml:space="preserve">
    <value>[INFO] If is your first time using this application, it's possible to create an example document to see how it works, do you want to proceed with this example?</value>
  </data>
  <data name="InputFilesValidationDescription" xml:space="preserve">
    <value>## Here the application will make some validations on each file to verify if it follows what is expected.
</value>
  </data>
  <data name="InputFilesValidationFailed" xml:space="preserve">
    <value>
[ERROR] Some validations have failed, fix every error showed before and restart the application!</value>
  </data>
  <data name="InputFilesValidationHighlightParametersTest1" xml:space="preserve">
    <value>[ERROR | LINE {0}] The field 'Parameter Value' cannot be empty if the field 'Parameter Name' is filled!</value>
    <comment>Variable is 'highlightFileLineCounter'</comment>
  </data>
  <data name="InputFilesValidationInputDataTest1" xml:space="preserve">
    <value>[ERROR | LINE {0}] One of the fields in this line are empty!</value>
    <comment>Variable is 'inputFileLineCounter'</comment>
  </data>
  <data name="InputFilesValidationInputDataTest2" xml:space="preserve">
    <value>[ERROR | LINE {0}] The first field of the line must be a INTEGER NUMBER!</value>
    <comment>Variable is 'inputFileLineCounter'</comment>
  </data>
  <data name="InputFilesValidationPassed" xml:space="preserve">
    <value>
[INFO] All validations are OK and you can proceed with the creation of the document!
</value>
  </data>
  <data name="InputFilesValidationPicturesFolderCounterEqualZero" xml:space="preserve">
    <value>[INFO] Nothing was found in the 'Pictures' folder!</value>
  </data>
  <data name="InputFilesValidationPicturesFolderCounterMoreThanZero" xml:space="preserve">
    <value>[INFO] {0} image(s) detected in the 'Pictures' folder!</value>
    <comment>Variable is 'dataList.Count'</comment>
  </data>
  <data name="InputFilesValidationSectionInformationTest1" xml:space="preserve">
    <value>
[ERROR | LINE {0}] Section number and / or section title are empty and both are need for the application!</value>
    <comment>Variable is 'sectionFileLineCounter'</comment>
  </data>
  <data name="InputFilesValidationSectionInformationTest2" xml:space="preserve">
    <value>[ERROR | LINE {0}] The first field of the line must be a INTEGER NUMBER!</value>
    <comment>Variable is 'sectionFileLineCounter'</comment>
  </data>
  <data name="InputFilesValidationTitle" xml:space="preserve">
    <value>        INPUT FILES VALIDATION
</value>
  </data>
  <data name="JSONDescriptionWord" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="JSONRequisitionWord" xml:space="preserve">
    <value>Request</value>
  </data>
  <data name="JSONResponseWord" xml:space="preserve">
    <value>Response</value>
  </data>
  <data name="PressAnyKeyStartCreation" xml:space="preserve">
    <value>Press any key to start creation...
</value>
  </data>
  <data name="PressAnyKeyToExitApplication" xml:space="preserve">
    <value>Press any key to exit application...</value>
  </data>
  <data name="PressAnyKeyToProceed" xml:space="preserve">
    <value>
Press any key to proceed...</value>
  </data>
  <data name="PrintGenericErrorException" xml:space="preserve">
    <value>
[ERROR]: An error has occurred! See details below: 
{0}</value>
    <comment>Variable is 'exception.Message'</comment>
  </data>
  <data name="RequiredField" xml:space="preserve">
    <value>
* - Required field.</value>
  </data>
  <data name="UserDecisionApplicationLanguage" xml:space="preserve">
    <value>
[INFO] You chose English language!
</value>
  </data>
  <data name="UserDecisionExampleDocumentation" xml:space="preserve">
    <value>
- Type '1' to create example
- Type '2' to customize input data

Option: </value>
  </data>
  <data name="UserDecisionOptionOneExampleDocumentation" xml:space="preserve">
    <value>

[INFO] User chose to proceed with example!
</value>
  </data>
  <data name="UserDecisionOptionTwoExampleDocumentation" xml:space="preserve">
    <value>

[INFO] User will input it's own data!
</value>
  </data>
</root>